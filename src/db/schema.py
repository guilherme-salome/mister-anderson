#!/usr/bin/env python3
import os
import sqlite3
import logging
from typing import Iterable, Optional
from contextlib import contextmanager


logging.basicConfig(
    format="%(asctime)s - %(threadName)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

PROJECT_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
DATA_DIR = os.path.join(PROJECT_DIR, "data")
ACCESS_DB_PATH = os.path.join(DATA_DIR, "msaccess.sqlite")

PRAGMAS = [
    "PRAGMA journal_mode=WAL",
    "PRAGMA synchronous=NORMAL",
    "PRAGMA foreign_keys=ON",
]

DDL = [
    # Reference/Lookup Tables
    """
    CREATE TABLE IF NOT EXISTS MAKE (
        COD_MAKE INTEGER PRIMARY KEY,
        MAKE TEXT NOT NULL,
        ATIVADO INTEGER NOT NULL CHECK (ATIVADO IN (0,1)) DEFAULT 1
    )
    """,
    """
    CREATE TABLE IF NOT EXISTS CPU (
        COD_CPU INTEGER PRIMARY KEY,
        CPU TEXT NOT NULL,
        ATIVADO INTEGER NOT NULL CHECK (ATIVADO IN (0,1)) DEFAULT 1
    )
    """,
    """
    CREATE TABLE IF NOT EXISTS MEMORY (
        COD_MEMORY INTEGER PRIMARY KEY,
        MEMORY TEXT NOT NULL,
        ATIVADO INTEGER NOT NULL CHECK (ATIVADO IN (0,1)) DEFAULT 1
    )
    """,
    """
    CREATE TABLE IF NOT EXISTS HD (
        COD_HD INTEGER PRIMARY KEY,
        HD TEXT NOT NULL,
        ATIVADO INTEGER NOT NULL CHECK (ATIVADO IN (0,1)) DEFAULT 1
    )
    """,
    """
    CREATE TABLE IF NOT EXISTS SCREENSIZE (
        COD_SCREEN INTEGER PRIMARY KEY,
        SCREEN TEXT NOT NULL,
        ATIVADO INTEGER NOT NULL CHECK (ATIVADO IN (0,1)) DEFAULT 1
    )
    """,
    """
    CREATE TABLE IF NOT EXISTS GENERATION (
        COD_GENERATION INTEGER PRIMARY KEY,
        GENERATION TEXT NOT NULL,
        ATIVADO INTEGER NOT NULL CHECK (ATIVADO IN (0,1)) DEFAULT 1
    )
    """,
    """
    CREATE TABLE IF NOT EXISTS FORMFACTOR (
        COD_FF INTEGER PRIMARY KEY,
        FF TEXT,
        CAT_FF INTEGER,
        IMAGE_NAME TEXT,
        PATH_IMAGE TEXT,
        ATIVADO INTEGER NOT NULL CHECK (ATIVADO IN (0,1)) DEFAULT 1
    )
    """,
    """
    CREATE TABLE IF NOT EXISTS GRADE (
        COD_GRADE INTEGER PRIMARY KEY,
        GRADE TEXT,
        DESCRIPTION TEXT,
        COD_CAT_GRADE INTEGER,
        ATIVADO INTEGER NOT NULL CHECK (ATIVADO IN (0,1)) DEFAULT 1
    )
    """,
    """
    CREATE TABLE IF NOT EXISTS SECTOR (
        COD_SECTOR INTEGER PRIMARY KEY,
        SECTOR TEXT,
        ATIVADO INTEGER NOT NULL CHECK (ATIVADO IN (0,1)) DEFAULT 1
    )
    """,
    """
    CREATE TABLE IF NOT EXISTS TECHNICIAN (
        COD_TECH INTEGER PRIMARY KEY,
        TECHNICIAN TEXT,
        ATIVADO INTEGER NOT NULL CHECK (ATIVADO IN (0,1)) DEFAULT 1
    )
    """,
    """
    CREATE TABLE IF NOT EXISTS USUARIOS (
        COD_USUARIO INTEGER PRIMARY KEY,
        USUARIO TEXT,
        TIPO INTEGER,
        SECTOR INTEGER,
        LOGIN TEXT,
        SENHA TEXT,
        ATIVADO INTEGER NOT NULL CHECK (ATIVADO IN (0,1)) DEFAULT 1,
        FOREIGN KEY (SECTOR) REFERENCES SECTOR (COD_SECTOR)
    )
    """,
    """
    CREATE TABLE IF NOT EXISTS TBL_DOWNSTREAM_VENDORS (
        DSVID INTEGER PRIMARY KEY,
        DSV_NAME TEXT
    )
    """,
    """
    CREATE TABLE IF NOT EXISTS COA (
        COD_COA INTEGER PRIMARY KEY,
        COA TEXT,
        ATIVADO INTEGER NOT NULL CHECK (ATIVADO IN (0,1)) DEFAULT 1
    )
    """,
    """
    CREATE TABLE IF NOT EXISTS DESTINY (
        COD_DESTINY INTEGER PRIMARY KEY,
        DESTINY TEXT,
        SECTOR INTEGER,
        ATIVADO INTEGER NOT NULL CHECK (ATIVADO IN (0,1)) DEFAULT 1,
        FOREIGN KEY (SECTOR) REFERENCES SECTOR(COD_SECTOR)
    )
    """,
    """
    CREATE TABLE IF NOT EXISTS DESTINY2 (
        COD_DESTINY2 INTEGER PRIMARY KEY,
        DESTINY2 TEXT,
        ATIVADO INTEGER NOT NULL CHECK (ATIVADO IN (0,1)) DEFAULT 1
    )
    """,
    """
    CREATE TABLE IF NOT EXISTS SITASSETS (
        COD_SIT INTEGER PRIMARY KEY,
        SIT TEXT,
        ATIVADO INTEGER NOT NULL CHECK (ATIVADO IN (0,1)) DEFAULT 1
    )
    """,
    """
    CREATE TABLE IF NOT EXISTS CURRENT_SECTOR (
        CURRENT_SECTORID INTEGER PRIMARY KEY,
        CURRENT_SECTOR TEXT,
        ACTIVE INTEGER NOT NULL CHECK (ACTIVE IN (0,1)) DEFAULT 1
    )
    """,
    """
    CREATE TABLE IF NOT EXISTS TBL_CHARGE_TYPE (
        CHARGE_TYPEID INTEGER PRIMARY KEY,
        CHARGE_TYPE_NAME TEXT,
        IMAGE_NAME TEXT,
        PATH_IMAGE TEXT,
        ATIVADO INTEGER NOT NULL CHECK (ATIVADO IN (0,1)) DEFAULT 1
    )
    """,
    # Extra lookups referenced in ER but not defined
    """
    CREATE TABLE IF NOT EXISTS TUSUARIO (
        TIPO INTEGER PRIMARY KEY,
        DESCRICAO TEXT
    )
    """,
    """
    CREATE TABLE IF NOT EXISTS CAT_FORMFACTOR (
        CAT_FF INTEGER PRIMARY KEY,
        NAME TEXT
    )
    """,
    """
    CREATE TABLE IF NOT EXISTS TBL_CAT_GRADE (
        COD_CAT_GRADE INTEGER PRIMARY KEY,
        NAME TEXT
    )
    """,
    """
    CREATE TABLE IF NOT EXISTS TBL_TRUCK (
        TRUCKID INTEGER PRIMARY KEY,
        TRUCK_NAME TEXT
    )
    """,

    # Clients and consigner
    """
    CREATE TABLE IF NOT EXISTS TBL_CLIENTS (
        CLIENTID INTEGER PRIMARY KEY,
        CLIENTNAME TEXT,
        CLIENTNICK TEXT,
        CLIENTDEFAULTSET INTEGER,
        CONSIGNORID INTEGER,
        FOLDERID TEXT,
        RC TEXT,
        KYOZOU TEXT,
        CLIENTCATEGORYID INTEGER,
        CLIENTNOTES TEXT,
        ACTIVATE INTEGER NOT NULL CHECK (ACTIVATE IN (0,1)) DEFAULT 1
    )
    """,
    """
    CREATE TABLE IF NOT EXISTS SUBCONSIGNER (
        COD_SUBCONSIGNER INTEGER PRIMARY KEY,
        COD_CONSIGNER INTEGER,
        SUBCONSIGNER TEXT,
        SUBCONSIGNERID INTEGER,
        ATIVADO INTEGER NOT NULL CHECK (ATIVADO IN (0,1)) DEFAULT 1,
        FOREIGN KEY (COD_CONSIGNER) REFERENCES TBL_CLIENTS(CLIENTID)
    )
    """,
    """
    CREATE TABLE IF NOT EXISTS TBL_SALES_CUSTOMERS (
        CUSTOMERID INTEGER PRIMARY KEY,
        CUSTOMER_COMPANY TEXT,
        CUSTOMER_NAME TEXT,
        CUSTOMER_EMAIL TEXT,
        CUSTOMER_ADDRESS_LINE1 TEXT,
        CUSTOMER_ADDRESS_LINE2 TEXT,
        CUSTOMER_CITY TEXT,
        CUSTOMER_STATE TEXT,
        CUSTOMER_COUNTRY TEXT,
        CUSTOMER_ZIP TEXT,
        CUSTOMER_PHONE TEXT,
        CUSTOMER_MOBILE TEXT,
        CUSTOMER_NOTES TEXT,
        CUSTOMER_KYOZOUID INTEGER,
        ACTIVATE INTEGER NOT NULL CHECK (ACTIVATE IN (0,1)) DEFAULT 1
    )
    """,

    # Pickup
    """
    CREATE TABLE IF NOT EXISTS TBL_PICKUP (
        PICKUP_NUMBER INTEGER PRIMARY KEY,
        COD_CONSIGNER INTEGER,
        COD_SUBCONSIGNER INTEGER,
        MANIFEST INTEGER,
        DT_PICKUP TEXT,
        TRUCK INTEGER,
        COD_TECH INTEGER,
        TRIP_NUMBER INTEGER,
        DESCRIPTION TEXT,
        MY_NOTES TEXT,
        SIT INTEGER,
        RC TEXT,
        LOCATION TEXT,
        CURRENT_SECTOR INTEGER,
        ADDRESS_PICKUP TEXT,
        CITY_PICKUP TEXT,
        STATE_PICKUP TEXT,
        ZIP_PICKUP TEXT,
        CONTACTNAME TEXT,
        CONTACTPHONE TEXT,
        CONTACTEMAIL TEXT,
        _source_updated_at TEXT,
        FOREIGN KEY (COD_CONSIGNER) REFERENCES TBL_CLIENTS(CLIENTID),
        FOREIGN KEY (COD_SUBCONSIGNER) REFERENCES SUBCONSIGNER(COD_SUBCONSIGNER),
        FOREIGN KEY (TRUCK) REFERENCES TBL_TRUCK(TRUCKID),
        FOREIGN KEY (COD_TECH) REFERENCES TECHNICIAN(COD_TECH),
        FOREIGN KEY (SIT) REFERENCES SITASSETS(COD_SIT),
        FOREIGN KEY (CURRENT_SECTOR) REFERENCES CURRENT_SECTOR(CURRENT_SECTORID)
    )
    """,

    # Pallet
    """
    CREATE TABLE IF NOT EXISTS PALLET (
        COD_PALLET INTEGER PRIMARY KEY,
        COD_CUSTOMERS INTEGER,
        DESCRIPTION TEXT,
        SECTOR INTEGER,
        DT TEXT,
        HORA TEXT,
        OPENBY INTEGER,
        TECHNICIAN INTEGER,
        NOTE TEXT,
        DTF TEXT,
        HORAF TEXT,
        CLOSEBY INTEGER,
        CURRENT_SECTOR INTEGER,
        HEIGHT NUMERIC,
        LENGTH NUMERIC,
        WIDTH NUMERIC,
        WEIGHT NUMERIC,
        QUANTITY INTEGER,
        PRICE NUMERIC,
        TARGET_PRICE NUMERIC,
        DSVID INTEGER,
        AUCTION INTEGER NOT NULL CHECK (AUCTION IN (0,1)) DEFAULT 0,
        SOLD INTEGER NOT NULL CHECK (SOLD IN (0,1)) DEFAULT 0,
        CUSTOMERID INTEGER,
        DT_SOLD TEXT,
        DT_PAID TEXT,
        SHIPPING_PREPARED INTEGER NOT NULL CHECK (SHIPPING_PREPARED IN (0,1)) DEFAULT 0,
        READY_PICKUP INTEGER NOT NULL CHECK (READY_PICKUP IN (0,1)) DEFAULT 0,
        ORDERID INTEGER,
        KYOZOU_ORDERID INTEGER,
        _source_updated_at TEXT,
        FOREIGN KEY (SECTOR) REFERENCES SECTOR(COD_SECTOR),
        FOREIGN KEY (CURRENT_SECTOR) REFERENCES CURRENT_SECTOR(CURRENT_SECTORID),
        FOREIGN KEY (DSVID) REFERENCES TBL_DOWNSTREAM_VENDORS(DSVID),
        FOREIGN KEY (CUSTOMERID) REFERENCES TBL_SALES_CUSTOMERS(CUSTOMERID)
    )
    """,

    # Assets
    """
    CREATE TABLE IF NOT EXISTS ASSETS (
        COD_ASSETS INTEGER PRIMARY KEY,
        COD_CONSIGNER INTEGER,
        COD_SUBCONSIGNER INTEGER,
        MANIFEST INTEGER,
        PALLET INTEGER,
        PICKUP_NUMBER INTEGER,
        WEIGHT NUMERIC,
        DT_PICKUP TEXT,
        DT_PROCESSED TEXT,
        SECTOR_PROC INTEGER,
        PROCESSBY INTEGER,
        PROCBY TEXT,
        SECTOR INTEGER,
        COD_TECH INTEGER,
        DESCRIPTION TEXT,
        OPENBY INTEGER,
        DT TEXT,
        HORA TEXT,
        SIT INTEGER,
        DTF TEXT,
        HORAF TEXT,
        CLOSEBY INTEGER,
        CURRENT_SECTOR INTEGER,
        LOCATION TEXT,
        FLAG INTEGER NOT NULL CHECK (FLAG IN (0,1)) DEFAULT 0,
        PRICE NUMERIC,
        DT_SOLD TEXT,
        DT_PAID TEXT,
        DT_SHIP TEXT,
        _source_updated_at TEXT,
        FOREIGN KEY (PICKUP_NUMBER) REFERENCES TBL_PICKUP(PICKUP_NUMBER),
        FOREIGN KEY (COD_SUBCONSIGNER) REFERENCES SUBCONSIGNER(COD_SUBCONSIGNER),
        FOREIGN KEY (SECTOR) REFERENCES SECTOR(COD_SECTOR),
        FOREIGN KEY (COD_TECH) REFERENCES TECHNICIAN(COD_TECH),
        FOREIGN KEY (SIT) REFERENCES SITASSETS(COD_SIT),
        FOREIGN KEY (CURRENT_SECTOR) REFERENCES CURRENT_SECTOR(CURRENT_SECTORID)
    )
    """,

    # Itemized Assets
    """
    CREATE TABLE IF NOT EXISTS IASSETS (
        COD_IASSETS INTEGER PRIMARY KEY,
        COD_ASSETS INTEGER,
        COD_PALLET INTEGER,
        MANIFEST INTEGER,
        SN TEXT,
        ASSET_TAG TEXT,
        DESCRIPTION TEXT,
        QUANTITY INTEGER,
        MAKE INTEGER,
        BRAND TEXT,
        MODEL TEXT,
        SCREENSIZE INTEGER,
        CPU INTEGER,
        GENERATION INTEGER,
        SPEED INTEGER,
        MEMORY INTEGER,
        HD INTEGER,
        HD_SERIAL_OUT TEXT,
        HD_SERIAL TEXT,
        WEBCAM2 INTEGER NOT NULL CHECK (WEBCAM2 IN (0,1)) DEFAULT 0,
        WEBCAM TEXT,
        BATTERY2 INTEGER NOT NULL CHECK (BATTERY2 IN (0,1)) DEFAULT 0,
        BATTERY TEXT,
        CHARGE_TYPE INTEGER,
        FORMFACTOR INTEGER,
        PARTNAME TEXT,
        PARTMISSING INTEGER NOT NULL CHECK (PARTMISSING IN (0,1)) DEFAULT 0,
        COA INTEGER,
        LAYERS TEXT,
        COD_CONSIGNER INTEGER,
        COD_SUBCONSIGNER INTEGER,
        COD_DESTINY INTEGER,
        COD_DESTINY2 INTEGER,
        RECYCLED_REASON TEXT,
        GRADE INTEGER,
        REASON TEXT,
        COD_TECH INTEGER,
        PRICE_COST NUMERIC,
        PRICE NUMERIC,
        DT_SOLD TEXT,
        DT_PAID TEXT,
        DT_SHIP TEXT,
        _source_updated_at TEXT,
        FOREIGN KEY (COD_ASSETS) REFERENCES ASSETS(COD_ASSETS),
        FOREIGN KEY (COD_PALLET) REFERENCES PALLET(COD_PALLET),
        FOREIGN KEY (MAKE) REFERENCES MAKE(COD_MAKE),
        FOREIGN KEY (SCREENSIZE) REFERENCES SCREENSIZE(COD_SCREEN),
        FOREIGN KEY (CPU) REFERENCES CPU(COD_CPU),
        FOREIGN KEY (GENERATION) REFERENCES GENERATION(COD_GENERATION),
        FOREIGN KEY (MEMORY) REFERENCES MEMORY(COD_MEMORY),
        FOREIGN KEY (HD) REFERENCES HD(COD_HD),
        FOREIGN KEY (FORMFACTOR) REFERENCES FORMFACTOR(COD_FF),
        FOREIGN KEY (COA) REFERENCES COA(COD_COA),
        FOREIGN KEY (GRADE) REFERENCES GRADE(COD_GRADE),
        FOREIGN KEY (COD_DESTINY) REFERENCES DESTINY(COD_DESTINY),
        FOREIGN KEY (COD_DESTINY2) REFERENCES DESTINY2(COD_DESTINY2),
        FOREIGN KEY (CHARGE_TYPE) REFERENCES TBL_CHARGE_TYPE(CHARGE_TYPEID),
        FOREIGN KEY (COD_TECH) REFERENCES TECHNICIAN(COD_TECH)
    )
    """,
    "CREATE UNIQUE INDEX IF NOT EXISTS ux_iassets_asset_tag ON IASSETS(ASSET_TAG)",
    "CREATE INDEX IF NOT EXISTS ix_iassets_sn ON IASSETS(SN)",
    "CREATE INDEX IF NOT EXISTS ix_iassets_cod_assets ON IASSETS(COD_ASSETS)",

    # Testing
    """
    CREATE TABLE IF NOT EXISTS TBL_IASSETS_TESTING (
        COD_IASSETS_TESTING INTEGER PRIMARY KEY,
        COD_IASSETS INTEGER,
        MACHINE_TEMPERATURE TEXT,
        CPU_TEMPERATURE TEXT,
        HD TEXT,
        GRAPHICS_CARD TEXT,
        SOUND TEXT,
        MICROPHONE TEXT,
        MEMORY TEXT,
        NETWORK TEXT,
        USB TEXT,
        WEBCAM TEXT,
        MOTHERBOARD TEXT,
        POWER_SUPPLY TEXT,
        BATTERY TEXT,
        TESTING_RESULT TEXT,
        COD_TECH INTEGER,
        CURRENT_SECTOR INTEGER,
        FOREIGN KEY (COD_IASSETS) REFERENCES IASSETS(COD_IASSETS),
        FOREIGN KEY (COD_TECH) REFERENCES TECHNICIAN(COD_TECH),
        FOREIGN KEY (CURRENT_SECTOR) REFERENCES CURRENT_SECTOR(CURRENT_SECTORID)
    )
    """,

    # Outgoing/Shipping
    """
    CREATE TABLE IF NOT EXISTS TBL_OUTGOING_WHOLESALE (
        OUTGOINGID INTEGER PRIMARY KEY,
        PO_TYPEID INTEGER,
        CUSTOMERID INTEGER,
        DESCRIPTION TEXT,
        STATUS INTEGER,
        STATUS_NEXT_ID INTEGER,
        LOCATION TEXT,
        TOTAL_VALUE NUMERIC,
        WEIGHT INTEGER,
        CURRENT_SECTOR INTEGER,
        COD_TECH INTEGER,
        OPENBY INTEGER,
        CONFIRMED INTEGER NOT NULL CHECK (CONFIRMED IN (0,1)) DEFAULT 0,
        MAKE_INVOICE INTEGER NOT NULL CHECK (MAKE_INVOICE IN (0,1)) DEFAULT 0,
        KYOZOU_ORDERID INTEGER,
        WP INTEGER NOT NULL CHECK (WP IN (0,1)) DEFAULT 0,
        PB INTEGER NOT NULL CHECK (PB IN (0,1)) DEFAULT 0,
        SHIPPING_PREPARED INTEGER NOT NULL CHECK (SHIPPING_PREPARED IN (0,1)) DEFAULT 0,
        SEND_DIMENTIONS INTEGER NOT NULL CHECK (SEND_DIMENTIONS IN (0,1)) DEFAULT 0,
        BOL INTEGER,
        DT_PICKUP TEXT,
        RECEIVE_BOL INTEGER NOT NULL CHECK (RECEIVE_BOL IN (0,1)) DEFAULT 0,
        SEND_DOCK INTEGER NOT NULL CHECK (SEND_DOCK IN (0,1)) DEFAULT 0,
        READY_PICKUP INTEGER NOT NULL CHECK (READY_PICKUP IN (0,1)) DEFAULT 0,
        COMPLETED INTEGER NOT NULL CHECK (COMPLETED IN (0,1)) DEFAULT 0,
        FOREIGN KEY (CUSTOMERID) REFERENCES TBL_SALES_CUSTOMERS(CUSTOMERID),
        FOREIGN KEY (CURRENT_SECTOR) REFERENCES CURRENT_SECTOR(CURRENT_SECTORID),
        FOREIGN KEY (COD_TECH) REFERENCES TECHNICIAN(COD_TECH)
    )
    """,
    """
    CREATE TABLE IF NOT EXISTS TBL_OUTGOING_ITEMS_WHOLESALE (
        OUTGOINGITEMSID INTEGER PRIMARY KEY,
        OUTGOINGID INTEGER,
        COD_PALLET INTEGER,
        PRICE NUMERIC,
        CUSTOMERID INTEGER,
        DT_PICKUP TEXT,
        BOL INTEGER,
        KYOZOU_ORDERID INTEGER,
        COD_TECH INTEGER,
        CURRENT_SECTOR INTEGER,
        FLAG_TRANSFER INTEGER NOT NULL CHECK (FLAG_TRANSFER IN (0,1)) DEFAULT 0,
        FLAG_MERGE INTEGER NOT NULL CHECK (FLAG_MERGE IN (0,1)) DEFAULT 0,
        FOREIGN KEY (OUTGOINGID) REFERENCES TBL_OUTGOING_WHOLESALE(OUTGOINGID),
        FOREIGN KEY (COD_PALLET) REFERENCES PALLET(COD_PALLET),
        FOREIGN KEY (CUSTOMERID) REFERENCES TBL_SALES_CUSTOMERS(CUSTOMERID),
        FOREIGN KEY (COD_TECH) REFERENCES TECHNICIAN(COD_TECH),
        FOREIGN KEY (CURRENT_SECTOR) REFERENCES CURRENT_SECTOR(CURRENT_SECTORID)
    )
    """,

    # Bidding
    """
    CREATE TABLE IF NOT EXISTS TBL_BIDS (
        BIDID INTEGER PRIMARY KEY,
        DESCRIPTION TEXT,
        START_DATE TEXT,
        END_DATE TEXT,
        END_TIME TEXT,
        CREATEDBY INTEGER,
        STATUS INTEGER,
        FLAG INTEGER NOT NULL CHECK (FLAG IN (0,1)) DEFAULT 0
    )
    """,
    """
    CREATE TABLE IF NOT EXISTS TBL_BIDS_ITEMS (
        BID_ITEMSID INTEGER PRIMARY KEY,
        BIDID INTEGER,
        COD_PALLET INTEGER,
        START_PRICE NUMERIC,
        SOLD_PRICE NUMERIC,
        CUSTOMERID INTEGER,
        STATUS INTEGER,
        FLAG INTEGER NOT NULL CHECK (FLAG IN (0,1)) DEFAULT 0,
        FOREIGN KEY (BIDID) REFERENCES TBL_BIDS(BIDID),
        FOREIGN KEY (COD_PALLET) REFERENCES PALLET(COD_PALLET),
        FOREIGN KEY (CUSTOMERID) REFERENCES TBL_SALES_CUSTOMERS(CUSTOMERID)
    )
    """,
]

INDEXES = [
    "CREATE INDEX IF NOT EXISTS ix_tbl_pickup_subconsigner ON TBL_PICKUP(COD_SUBCONSIGNER)",
    "CREATE INDEX IF NOT EXISTS ix_tbl_pickup_tech ON TBL_PICKUP(COD_TECH)",
    "CREATE INDEX IF NOT EXISTS ix_assets_pickup ON ASSETS(PICKUP_NUMBER)",
    "CREATE INDEX IF NOT EXISTS ix_assets_sector ON ASSETS(SECTOR)",
    "CREATE INDEX IF NOT EXISTS ix_assets_current_sector ON ASSETS(CURRENT_SECTOR)",
    "CREATE INDEX IF NOT EXISTS ix_pallet_customer ON PALLET(CUSTOMERID)",
]


def _ensure_data_dir(path: str):
    os.makedirs(os.path.dirname(path), exist_ok=True)


def apply_pragmas(conn: sqlite3.Connection):
    cur = conn.cursor()
    for p in PRAGMAS:
        logger.debug(f"Applying PRAGMA: {p}")
        cur.execute(p)


def create_schema(conn: sqlite3.Connection, extra_sql: Iterable[str] = ()):
    cur = conn.cursor()
    logger.info("Creating/ensuring database schema...")
    for stmt in DDL:
        logger.debug(f"Executing DDL: {stmt.splitlines()[0][:80]}...")
        cur.execute(stmt)
    for idx in INDEXES:
        logger.debug(f"Creating index: {idx}")
        cur.execute(idx)
    for stmt in extra_sql:
        logger.debug(f"Executing extra SQL: {stmt}")
        cur.execute(stmt)
    conn.commit()
    logger.info("Schema creation/verification complete.")


def get_connection(db_path: Optional[str] = None, ensure_schema: bool = False, row_factory: bool = True) -> sqlite3.Connection:
    """
    Open a SQLite connection with recommended pragmas and optional schema creation.
    """
    db_path = db_path or ACCESS_DB_PATH
    _ensure_data_dir(db_path)
    initializing = not os.path.exists(db_path)
    conn = sqlite3.connect(db_path)
    if row_factory:
        conn.row_factory = sqlite3.Row
    apply_pragmas(conn)
    if ensure_schema or initializing:
        logger.info(f"Initializing schema for database at {db_path}")
        create_schema(conn)
    else:
        logger.debug(f"Opened database at {db_path}")
    return conn


@contextmanager
def connection(db_path: Optional[str] = None, ensure_schema: bool = True, row_factory: bool = True):
    """
    Context manager wrapper around connect() to simplify usage.
    """
    conn = get_connection(db_path=db_path, ensure_schema=ensure_schema, row_factory=row_factory)
    try:
        yield conn
    finally:
        conn.close()


if __name__ == "__main__":
    with connection() as con:
        print(f"Connected to {ACCESS_DB_PATH}.")
        cursor = con.cursor()
        # Tables
        tables = cursor.execute("""
            SELECT name FROM sqlite_master
            WHERE type='table' AND name NOT LIKE 'sqlite_%'
            ORDER BY name
        """).fetchall()
        print("Tables:")
        for (name,) in tables:
            print(f"  - {name}")
